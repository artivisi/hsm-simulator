-- ============================================================================
-- HSM Simulator - Sample Data
-- Version: 2.0
-- Purpose: Insert sample data for banks, terminals, custodians, and users
-- ============================================================================

-- ============================================================================
-- Sample Banks (Four-Party Model)
-- Purpose: Create sample banks representing Issuer, Acquirer, Switch, Processor
-- ============================================================================
-- IMPORTANT: Using fixed UUIDs for reproducibility in educational simulator
-- These UUIDs are hardcoded to ensure consistency across migrations and tests
-- ============================================================================

INSERT INTO banks (id, bank_code, bank_name, bank_type, country_code, status) VALUES
    ('48a9e84c-ff57-4483-bf83-b255f34a6466', 'ISS001', 'National Issuer Bank', 'ISSUER', 'IDN', 'ACTIVE'),
    ('550e8400-e29b-41d4-a716-446655440001', 'ACQ001', 'Merchant Acquirer Bank', 'ACQUIRER', 'IDN', 'ACTIVE'),
    ('550e8400-e29b-41d4-a716-446655440002', 'SWT001', 'National Payment Switch', 'SWITCH', 'IDN', 'ACTIVE'),
    ('550e8400-e29b-41d4-a716-446655440003', 'ISS002', 'Regional Issuer Bank', 'ISSUER', 'IDN', 'ACTIVE');

-- ============================================================================
-- Sample Terminals
-- Purpose: Create sample terminals (ATM, POS) for different banks
-- ============================================================================

INSERT INTO terminals (terminal_id, terminal_name, id_bank, terminal_type, location, status)
SELECT
    'TRM-ISS001-ATM-001',
    'National Issuer Bank - ATM Jakarta Pusat',
    b.id,
    'ATM',
    'Jakarta Pusat, Indonesia',
    'ACTIVE'
FROM banks b WHERE b.bank_code = 'ISS001'
UNION ALL
SELECT
    'TRM-ISS001-ATM-002',
    'National Issuer Bank - ATM Surabaya',
    b.id,
    'ATM',
    'Surabaya, Indonesia',
    'ACTIVE'
FROM banks b WHERE b.bank_code = 'ISS001'
UNION ALL
SELECT
    'TRM-ACQ001-POS-001',
    'Merchant Acquirer - POS SuperMarket',
    b.id,
    'POS',
    'Jakarta Selatan, Indonesia',
    'ACTIVE'
FROM banks b WHERE b.bank_code = 'ACQ001'
UNION ALL
SELECT
    'TRM-ACQ001-POS-002',
    'Merchant Acquirer - POS Restaurant',
    b.id,
    'POS',
    'Bandung, Indonesia',
    'ACTIVE'
FROM banks b WHERE b.bank_code = 'ACQ001'
UNION ALL
SELECT
    'TRM-ACQ001-MPOS-001',
    'Merchant Acquirer - Mobile POS Taxi',
    b.id,
    'MPOS',
    'Jakarta, Indonesia',
    'ACTIVE'
FROM banks b WHERE b.bank_code = 'ACQ001';

-- ============================================================================
-- Sample Key Custodians
-- Purpose: Create 3 sample custodians for testing key ceremony functionality
-- ============================================================================

INSERT INTO key_custodians (
    custodian_id,
    full_name,
    email,
    phone,
    department,
    status,
    created_by
) VALUES
    (
        'CUST-A-001',
        'Alice Johnson',
        'alice.johnson@yopmail.com',
        '+62-812-3456-7890',
        'IT Security',
        'ACTIVE',
        'system'
    ),
    (
        'CUST-B-002',
        'Bob Williams',
        'bob.williams@yopmail.com',
        '+62-812-3456-7891',
        'IT Security',
        'ACTIVE',
        'system'
    ),
    (
        'CUST-C-003',
        'Carol Martinez',
        'carol.martinez@yopmail.com',
        '+62-812-3456-7892',
        'IT Security',
        'ACTIVE',
        'system'
    );

-- ============================================================================
-- Default Admin User
-- Purpose: Create default admin user for initial system access
-- ============================================================================

-- Insert default admin user
-- Username: admin
-- Password: admin123 (BCrypt hash for 'admin123')
-- NOTE: Change this password in production!
INSERT INTO users (username, email, password, full_name, role, active) VALUES
('admin', 'admin@hsm-simulator.local', '$2a$10$XiLG2cUTyrhavQ0EDwicIOma78/x/bNX/V3PUMNJQuRumgwTLt4dy', 'System Administrator', 'ADMIN', TRUE);

-- ============================================================================
-- Sample Master Keys
-- Purpose: Create complete key hierarchy for testing PIN and MAC operations
-- ============================================================================
--
-- ⚠️ WARNING: EDUCATIONAL SAMPLE KEYS ONLY - DO NOT USE IN PRODUCTION! ⚠️
--
-- These keys were GENERATED USING ACTUAL CRYPTOGRAPHIC ALGORITHMS:
-- - LMK and TMK: Generated using AES KeyGenerator with SecureRandom
-- - TPK and TSK: DERIVED from TMK using PBKDF2-SHA256 (100,000 iterations)
-- - Key derivation context: "TPK:TRM-ISS001-ATM-001" and "TSK:TRM-ISS001-ATM-001"
-- - Generated by: SampleKeyGeneratorTest.java (run test to regenerate)
--
-- In a PRODUCTION environment, keys should be generated using:
-- 1. Key Ceremony (KeyCeremonyService) with Shamir Secret Sharing
-- 2. Secure Random Generation (KeyGenerationService.generateRandomMasterKey())
-- 3. PBKDF2 Key Derivation (KeyGenerationService.deriveMasterKey())
--
-- Production keys use:
-- - AES-256-GCM for encryption (with random IV)
-- - PBKDF2-SHA256 for key derivation (100,000 iterations, unique salt)
-- - SHA-256 for fingerprints and checksums (no MD5)
-- - Context-based derivation for operational keys (no truncation)
--
-- Operational keys (PIN, MAC, KEK) are DERIVED from master keys using:
--   KeyGenerationService.deriveOperationalKey(masterKey, context, keySize)
-- Where context = "KEY_TYPE:BANK_ID:TERMINAL_ID"
--
-- ============================================================================

-- Sample LMK (Local Master Key) for PIN storage encryption
-- Used for encrypting PINs at rest in the database
-- In production: Generated via Key Ceremony or Secure Random
INSERT INTO master_keys (
    master_key_id,
    key_type,
    algorithm,
    key_size,
    key_data,
    key_fingerprint,
    key_checksum,
    generation_method,
    kdf_iterations,
    kdf_salt,
    status,
    id_bank,
    generated_at,
    activated_at
)
SELECT
    'LMK-ISS001-SAMPLE',
    'LMK',
    'AES',
    256,
    decode('5DD14D36637632409C34F8F876F22BAF467D5633730ABA7273CF72027EDF90BA', 'hex'),
    '1ACD78ABB2075E372B65ED2D',
    '1ACD78ABB2075E37',
    'SAMPLE',
    0,
    'N/A',
    'ACTIVE',
    b.id,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM banks b WHERE b.bank_code = 'ISS001';

-- Sample TMK (Terminal Master Key) for ISS001 bank
-- Parent key for TPK and TSK derivation
INSERT INTO master_keys (
    master_key_id,
    key_type,
    algorithm,
    key_size,
    key_data,
    key_fingerprint,
    key_checksum,
    generation_method,
    kdf_iterations,
    kdf_salt,
    status,
    id_bank,
    generated_at,
    activated_at
)
SELECT
    'TMK-ISS001-SAMPLE',
    'TMK',
    'AES',
    256,
    decode('A1D565F24C52BBB31F3B2A975325A56B3820B10CC3DB8D07F402BF5E7E00FAAC', 'hex'),
    '2F9F49B8528D598F2B6747AB',
    '2F9F49B8528D598F',
    'SAMPLE',
    0,
    'N/A',
    'ACTIVE',
    b.id,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM banks b WHERE b.bank_code = 'ISS001';

-- Sample TPK (Terminal PIN Key) for terminal TRM-ISS001-ATM-001
-- Child of TMK, used for terminal PIN encryption
-- In production: DERIVED from TMK using PBKDF2
INSERT INTO master_keys (
    master_key_id,
    key_type,
    algorithm,
    key_size,
    key_data,
    key_fingerprint,
    key_checksum,
    generation_method,
    kdf_iterations,
    kdf_salt,
    status,
    parent_key_id,
    id_terminal,
    generated_at,
    activated_at
)
SELECT
    'TPK-TRM-ISS001-ATM-001',
    'TPK',
    'AES',
    256,
    decode('246A31D729B280DD7FCDA3BB7F187ABFA1BB0811D7EF3D68FDCA63579F3748B0', 'hex'),
    'A8FC6D4EEB3504158BC2525F',
    'A8FC6D4EEB350415',
    'DERIVED',
    100000,
    'TRM-ISS001-ATM-001',
    'ACTIVE',
    (SELECT id FROM master_keys WHERE master_key_id = 'TMK-ISS001-SAMPLE'),
    t.id,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM terminals t WHERE t.terminal_id = 'TRM-ISS001-ATM-001';

-- Sample TSK (Terminal Security Key) for terminal TRM-ISS001-ATM-001
-- Child of TMK, used for MAC generation and verification
-- In production: DERIVED from TMK using PBKDF2
INSERT INTO master_keys (
    master_key_id,
    key_type,
    algorithm,
    key_size,
    key_data,
    key_fingerprint,
    key_checksum,
    generation_method,
    kdf_iterations,
    kdf_salt,
    status,
    parent_key_id,
    id_terminal,
    generated_at,
    activated_at
)
SELECT
    'TSK-TRM-ISS001-ATM-001',
    'TSK',
    'AES',
    256,
    decode('3AC638783EF600FE5E25E8A2EE5B0D222EB810DDF64C3681DD11AFEFAF41614B', 'hex'),
    '77CDB02FD54A88C907B59B22',
    '77CDB02FD54A88C9',
    'DERIVED',
    100000,
    'TRM-ISS001-ATM-001',
    'ACTIVE',
    (SELECT id FROM master_keys WHERE master_key_id = 'TMK-ISS001-SAMPLE'),
    t.id,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM terminals t WHERE t.terminal_id = 'TRM-ISS001-ATM-001';

-- ============================================================================
-- Sample Generated PINs
-- Purpose: Pre-generated PIN for testing PIN verification methods
-- ============================================================================

-- Sample PIN for testing
-- PAN: 4111111111111111
-- PIN: 1234
-- PIN Block (ISO-0): 041225EEEEEEEEEE (clear), encrypted under LMK-ISS001-SAMPLE
-- PVV: 0187 (calculated using SHA-256)
-- Generated using: SampleDataGeneratorTest.java
INSERT INTO generated_pins (
    account_number,
    pin_length,
    pin_format,
    encrypted_pin_block,
    pin_verification_value,
    id_encryption_key,
    clear_pin,
    status,
    verification_attempts,
    generated_at
)
SELECT
    '4111111111111111',
    4,
    'ISO-0',
    '25BBDAB69938C6289C66975BF9315606D945728BF4870C7AB478898DF4E765C4',
    '0187',
    mk.id,
    '1234',
    'ACTIVE',
    0,
    CURRENT_TIMESTAMP
FROM master_keys mk
WHERE mk.master_key_id = 'LMK-ISS001-SAMPLE';

-- ============================================================================
-- Sample Generated MACs
-- Purpose: Pre-generated MAC for testing MAC verification
-- ============================================================================

-- Sample MAC for testing
-- Message: "0800822000000000000004000000000000000000001234567890123456"
-- Algorithm: AES-CMAC (NIST SP 800-38B)
-- MAC Key: TSK-TRM-ISS001-ATM-001
-- Generated using: SampleDataGeneratorTest.java
INSERT INTO generated_macs (
    message,
    message_length,
    mac_value,
    mac_algorithm,
    id_mac_key,
    status,
    verification_attempts,
    generated_at
)
SELECT
    '0800822000000000000004000000000000000000001234567890123456',
    58,
    '1B96CB0A8C59E30E',
    'AES-CMAC',
    mk.id,
    'ACTIVE',
    0,
    CURRENT_TIMESTAMP
FROM master_keys mk
WHERE mk.master_key_id = 'TSK-TRM-ISS001-ATM-001';

-- ============================================================================
-- Comments
-- ============================================================================
COMMENT ON TABLE banks IS 'Four-party model: Issuer, Acquirer, Switch, and additional Issuer bank';
COMMENT ON TABLE terminals IS 'Sample terminals including ATM, POS, and MPOS across different banks';
COMMENT ON TABLE key_custodians IS 'Sample custodians created for testing key ceremony workflows';
COMMENT ON TABLE users IS 'Default admin user for initial system access';
COMMENT ON TABLE master_keys IS 'Complete key hierarchy: LMK, TMK, TPK, TSK with parent-child relationships for ISS001 bank';
COMMENT ON TABLE generated_pins IS 'Sample PIN (1234) for PAN 4111111111111111 with PVV for testing both verification methods';
COMMENT ON TABLE generated_macs IS 'Sample MAC for testing MAC verification with AES-CMAC algorithm';

-- ============================================================================
-- Testing Guide
-- ============================================================================
--
-- This migration provides complete sample data for testing all HSM operations:
--
-- KEY HIERARCHY:
--   LMK-ISS001-SAMPLE (root)
--   TMK-ISS001-SAMPLE (root)
--     ├─ TPK-TRM-ISS001-ATM-001 (child of TMK, for PIN encryption)
--     └─ TSK-TRM-ISS001-ATM-001 (child of TMK, for MAC generation)
--
-- TESTING PIN VERIFICATION (Method A - with translation):
--   Endpoint: POST /api/hsm/pin/verify-with-translation
--   Request body:
--   {
--     "pinBlockUnderTPK": "4AD5A9AB1F88975DC7F0CC1CA03FA5A9265F18718C610057B10E11906D0EC2C6",
--     "pinBlockUnderLMK": "25BBDAB69938C6289C66975BF9315606D945728BF4870C7AB478898DF4E765C4",
--     "pan": "4111111111111111",
--     "pinFormat": "ISO-0",
--     "terminalId": "TRM-ISS001-ATM-001"
--   }
--   Expected: Valid PIN (1234)
--
-- TESTING PIN VERIFICATION (Method B - with PVV):
--   Endpoint: POST /api/hsm/pin/verify-with-pvv
--   Request body:
--   {
--     "pinBlockUnderTPK": "4AD5A9AB1F88975DC7F0CC1CA03FA5A9265F18718C610057B10E11906D0EC2C6",
--     "storedPVV": "0187",
--     "pan": "4111111111111111",
--     "pinFormat": "ISO-0",
--     "terminalId": "TRM-ISS001-ATM-001"
--   }
--   Expected: Valid PIN (PVV matches)
--
-- TESTING MAC VERIFICATION:
--   Endpoint: POST /api/hsm/mac/verify
--   Request body:
--   {
--     "message": "0800822000000000000004000000000000000000001234567890123456",
--     "mac": "1B96CB0A8C59E30E",
--     "algorithm": "AES-CMAC",
--     "keyId": "<TSK-TRM-ISS001-ATM-001 UUID from database>"
--   }
--   Expected: Valid MAC
--
-- NOTE: All values are REAL encrypted data generated using SampleDataGeneratorTest.java
--       PIN blocks and MAC values can be verified using the API endpoints above.
--
-- ============================================================================
-- End of Migration V2
-- ============================================================================
